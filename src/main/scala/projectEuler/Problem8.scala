package projectEuler

object Problem8 extends App {

  val digits = ("73167176531330624919225119674426574742355349194" +
    "934969835203127745063262395783180169848018694788518438586156" +
    "07891129494954595017379583319528532088055111254069874715852386" +
    "305071569329096329522744304355766896648950445244523161731856" +
    "403098711121722383113622298934233803081353362766142828064444" +
    "86645238749303589072962904915604407723907138105158593079608667017" +
    "2427121883998797908792274921901699720888093776657273330010533678" +
    "81220235421809751254540594752243525849077116705560136048395864" +
    "467063244157221553975369781797784617406495514929086256932197846" +
    "862248283972241375657056057490261407972968652414535100474821663" +
    "704844031998900088952434506585412275886668811642717147992444292" +
    "8230863465674813919123162824586178664583591245665294765456828489" +
    "12883142607690042242190226710556263211111093705442175069416589604080719840385" +
    "096245544436298123098787992724428490918884580156166097919133875499200524" +
    "063689912560717606058861164671094050775410022569831552000559357297257" +
    "1636269561882670428252483600823257530420752963450").toCharArray.map(_.asDigit)

  val numberLength = 13

  val product  = (from: Int, length: Int) => (from until from+length).foldLeft(1L)((acc, i) => acc * digits(i))

  val maximum  = (0 until digits.length - numberLength).foldLeft(1L)(
    (max, i) => scala.math.max(max, product(i, numberLength)))

  println(maximum)
}
